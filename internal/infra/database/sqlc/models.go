// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountProvider string

const (
	AccountProviderGoogle AccountProvider = "Google"
	AccountProviderApple  AccountProvider = "Apple"
	AccountProviderMeta   AccountProvider = "Meta"
	AccountProviderLocal  AccountProvider = "Local"
)

func (e *AccountProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountProvider(s)
	case string:
		*e = AccountProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountProvider: %T", src)
	}
	return nil
}

type NullAccountProvider struct {
	AccountProvider AccountProvider `json:"account_provider"`
	Valid           bool            `json:"valid"` // Valid is true if AccountProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountProvider) Scan(value interface{}) error {
	if value == nil {
		ns.AccountProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountProvider), nil
}

type CousineTypes string

const (
	CousineTypesITALIANA   CousineTypes = "ITALIANA"
	CousineTypesFRANCESA   CousineTypes = "FRANCESA"
	CousineTypesJAPONESA   CousineTypes = "JAPONESA"
	CousineTypesPORTUGUESA CousineTypes = "PORTUGUESA"
	CousineTypesMEXICANA   CousineTypes = "MEXICANA"
	CousineTypesARABE      CousineTypes = "ARABE"
	CousineTypesBRASILEIRA CousineTypes = "BRASILEIRA"
	CousineTypesTAILANDESA CousineTypes = "TAILANDESA"
	CousineTypesDOCES      CousineTypes = "DOCES"
	CousineTypesSALGADOS   CousineTypes = "SALGADOS"
)

func (e *CousineTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CousineTypes(s)
	case string:
		*e = CousineTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for CousineTypes: %T", src)
	}
	return nil
}

type NullCousineTypes struct {
	CousineTypes CousineTypes `json:"cousine_types"`
	Valid        bool         `json:"valid"` // Valid is true if CousineTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCousineTypes) Scan(value interface{}) error {
	if value == nil {
		ns.CousineTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CousineTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCousineTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CousineTypes), nil
}

type OrderStatus string

const (
	OrderStatusCREATED  OrderStatus = "CREATED"
	OrderStatusPROGRESS OrderStatus = "PROGRESS"
	OrderStatusFINISHED OrderStatus = "FINISHED"
	OrderStatusCANCELED OrderStatus = "CANCELED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type UserRole string

const (
	UserRoleConsumer    UserRole = "Consumer"
	UserRoleOwner       UserRole = "Owner"
	UserRoleEmployee    UserRole = "Employee"
	UserRoleDeliveryMan UserRole = "DeliveryMan"
	UserRoleAdmin       UserRole = "Admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Weekday string

const (
	WeekdayMONDAY    Weekday = "MONDAY"
	WeekdayTUESDAY   Weekday = "TUESDAY"
	WeekdayWEDNESDAY Weekday = "WEDNESDAY"
	WeekdayTHURSDAY  Weekday = "THURSDAY"
	WeekdayFRIDAY    Weekday = "FRIDAY"
	WeekdaySATURDAY  Weekday = "SATURDAY"
	WeekdaySUNDAY    Weekday = "SUNDAY"
)

func (e *Weekday) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Weekday(s)
	case string:
		*e = Weekday(s)
	default:
		return fmt.Errorf("unsupported scan type for Weekday: %T", src)
	}
	return nil
}

type NullWeekday struct {
	Weekday Weekday `json:"weekday"`
	Valid   bool    `json:"valid"` // Valid is true if Weekday is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeekday) Scan(value interface{}) error {
	if value == nil {
		ns.Weekday, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Weekday.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeekday) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Weekday), nil
}

type Address struct {
	ID         int32              `db:"id" json:"id"`
	ProfileID  pgtype.Int4        `db:"profile_id" json:"profile_id"`
	Street     string             `db:"street" json:"street"`
	Number     string             `db:"number" json:"number"`
	Complement string             `db:"complement" json:"complement"`
	District   string             `db:"district" json:"district"`
	Cep        string             `db:"cep" json:"cep"`
	City       string             `db:"city" json:"city"`
	State      string             `db:"state" json:"state"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type BusinessHour struct {
	RestaurantID int32       `db:"restaurant_id" json:"restaurant_id"`
	Weekday      Weekday     `db:"weekday" json:"weekday"`
	OpeningTime  pgtype.Time `db:"opening_time" json:"opening_time"`
	ClosingTime  pgtype.Time `db:"closing_time" json:"closing_time"`
}

type CousineType struct {
	ID   int32        `db:"id" json:"id"`
	Name CousineTypes `db:"name" json:"name"`
}

type Employee struct {
	ID        int32              `db:"id" json:"id"`
	UsersID   pgtype.UUID        `db:"users_id" json:"users_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type EmployeeRestaurant struct {
	EmployeeID   int32 `db:"employee_id" json:"employee_id"`
	RestaurantID int32 `db:"restaurant_id" json:"restaurant_id"`
}

type Item struct {
	ID           int32              `db:"id" json:"id"`
	RestaurantID int32              `db:"restaurant_id" json:"restaurant_id"`
	Name         string             `db:"name" json:"name"`
	Description  string             `db:"description" json:"description"`
	Img          string             `db:"img" json:"img"`
	Value        pgtype.Numeric     `db:"value" json:"value"`
	Score        pgtype.Numeric     `db:"score" json:"score"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Order struct {
	ID            int32              `db:"id" json:"id"`
	ProfileID     int32              `db:"profile_id" json:"profile_id"`
	ShippingValue pgtype.Numeric     `db:"shipping_value" json:"shipping_value"`
	TotalValue    pgtype.Numeric     `db:"total_value" json:"total_value"`
	Status        OrderStatus        `db:"status" json:"status"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type OrderItem struct {
	OrderID int32 `db:"order_id" json:"order_id"`
	ItemID  int32 `db:"item_id" json:"item_id"`
}

type Owner struct {
	ID           int32              `db:"id" json:"id"`
	UsersID      pgtype.UUID        `db:"users_id" json:"users_id"`
	RestaurantID pgtype.Int4        `db:"restaurant_id" json:"restaurant_id"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type PaymentMethod struct {
	ID          int32  `db:"id" json:"id"`
	Name        string `db:"name" json:"name"`
	Description string `db:"description" json:"description"`
	IsOnline    bool   `db:"isOnline" json:"is_online"`
}

type Profile struct {
	ID        int32              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	LastName  string             `db:"last_name" json:"last_name"`
	Cpf       string             `db:"cpf" json:"cpf"`
	Phone     string             `db:"phone" json:"phone"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type ProfileRestaurant struct {
	ProfileID    int32 `db:"profile_id" json:"profile_id"`
	RestaurantID int32 `db:"restaurant_id" json:"restaurant_id"`
}

type Restaurant struct {
	ID        int32              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Cnpj      string             `db:"cnpj" json:"cnpj"`
	Phone     string             `db:"phone" json:"phone"`
	Score     pgtype.Numeric     `db:"score" json:"score"`
	AddressID int32              `db:"address_id" json:"address_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type RestaurantCousineType struct {
	RestaurantID  int32 `db:"restaurant_id" json:"restaurant_id"`
	CousineTypeID int32 `db:"cousine_type_id" json:"cousine_type_id"`
}

type RestaurantPaymentMethod struct {
	PaymentMethodID int32 `db:"payment_method_id" json:"payment_method_id"`
	RestaurantID    int32 `db:"restaurant_id" json:"restaurant_id"`
}

type Users struct {
	ID              pgtype.UUID        `db:"id" json:"id"`
	ProfileID       pgtype.Int4        `db:"profile_id" json:"profile_id"`
	Email           string             `db:"email" json:"email"`
	Password        pgtype.Text        `db:"password" json:"password"`
	Role            UserRole           `db:"role" json:"role"`
	AccountProvider AccountProvider    `db:"account_provider" json:"account_provider"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
