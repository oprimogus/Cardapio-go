// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CardapioAccountProvider string

const (
	CardapioAccountProviderGoogle CardapioAccountProvider = "Google"
	CardapioAccountProviderApple  CardapioAccountProvider = "Apple"
	CardapioAccountProviderMeta   CardapioAccountProvider = "Meta"
)

func (e *CardapioAccountProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardapioAccountProvider(s)
	case string:
		*e = CardapioAccountProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for CardapioAccountProvider: %T", src)
	}
	return nil
}

type NullCardapioAccountProvider struct {
	CardapioAccountProvider CardapioAccountProvider `json:"cardapio_account_provider"`
	Valid                   bool                    `json:"valid"` // Valid is true if CardapioAccountProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardapioAccountProvider) Scan(value interface{}) error {
	if value == nil {
		ns.CardapioAccountProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardapioAccountProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardapioAccountProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardapioAccountProvider), nil
}

type CardapioCousineTypes string

const (
	CardapioCousineTypesITALIANA   CardapioCousineTypes = "ITALIANA"
	CardapioCousineTypesFRANCESA   CardapioCousineTypes = "FRANCESA"
	CardapioCousineTypesJAPONESA   CardapioCousineTypes = "JAPONESA"
	CardapioCousineTypesPORTUGUESA CardapioCousineTypes = "PORTUGUESA"
	CardapioCousineTypesMEXICANA   CardapioCousineTypes = "MEXICANA"
	CardapioCousineTypesARABE      CardapioCousineTypes = "ARABE"
	CardapioCousineTypesBRASILEIRA CardapioCousineTypes = "BRASILEIRA"
	CardapioCousineTypesTAILANDESA CardapioCousineTypes = "TAILANDESA"
	CardapioCousineTypesDOCES      CardapioCousineTypes = "DOCES"
	CardapioCousineTypesSALGADOS   CardapioCousineTypes = "SALGADOS"
)

func (e *CardapioCousineTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardapioCousineTypes(s)
	case string:
		*e = CardapioCousineTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for CardapioCousineTypes: %T", src)
	}
	return nil
}

type NullCardapioCousineTypes struct {
	CardapioCousineTypes CardapioCousineTypes `json:"cardapio_cousine_types"`
	Valid                bool                 `json:"valid"` // Valid is true if CardapioCousineTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardapioCousineTypes) Scan(value interface{}) error {
	if value == nil {
		ns.CardapioCousineTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardapioCousineTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardapioCousineTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardapioCousineTypes), nil
}

type CardapioOrderStatus string

const (
	CardapioOrderStatusCREATED  CardapioOrderStatus = "CREATED"
	CardapioOrderStatusPROGRESS CardapioOrderStatus = "PROGRESS"
	CardapioOrderStatusFINISHED CardapioOrderStatus = "FINISHED"
	CardapioOrderStatusCANCELED CardapioOrderStatus = "CANCELED"
)

func (e *CardapioOrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardapioOrderStatus(s)
	case string:
		*e = CardapioOrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CardapioOrderStatus: %T", src)
	}
	return nil
}

type NullCardapioOrderStatus struct {
	CardapioOrderStatus CardapioOrderStatus `json:"cardapio_order_status"`
	Valid               bool                `json:"valid"` // Valid is true if CardapioOrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardapioOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CardapioOrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardapioOrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardapioOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardapioOrderStatus), nil
}

type CardapioUserRole string

const (
	CardapioUserRoleConsumer    CardapioUserRole = "Consumer"
	CardapioUserRoleOwner       CardapioUserRole = "Owner"
	CardapioUserRoleEmployee    CardapioUserRole = "Employee"
	CardapioUserRoleDeliveryMan CardapioUserRole = "DeliveryMan"
	CardapioUserRoleAdmin       CardapioUserRole = "Admin"
)

func (e *CardapioUserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardapioUserRole(s)
	case string:
		*e = CardapioUserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for CardapioUserRole: %T", src)
	}
	return nil
}

type NullCardapioUserRole struct {
	CardapioUserRole CardapioUserRole `json:"cardapio_user_role"`
	Valid            bool             `json:"valid"` // Valid is true if CardapioUserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardapioUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.CardapioUserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardapioUserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardapioUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardapioUserRole), nil
}

type CardapioWeekday string

const (
	CardapioWeekdayMONDAY    CardapioWeekday = "MONDAY"
	CardapioWeekdayTUESDAY   CardapioWeekday = "TUESDAY"
	CardapioWeekdayWEDNESDAY CardapioWeekday = "WEDNESDAY"
	CardapioWeekdayTHURSDAY  CardapioWeekday = "THURSDAY"
	CardapioWeekdayFRIDAY    CardapioWeekday = "FRIDAY"
	CardapioWeekdaySATURDAY  CardapioWeekday = "SATURDAY"
	CardapioWeekdaySUNDAY    CardapioWeekday = "SUNDAY"
)

func (e *CardapioWeekday) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardapioWeekday(s)
	case string:
		*e = CardapioWeekday(s)
	default:
		return fmt.Errorf("unsupported scan type for CardapioWeekday: %T", src)
	}
	return nil
}

type NullCardapioWeekday struct {
	CardapioWeekday CardapioWeekday `json:"cardapio_weekday"`
	Valid           bool            `json:"valid"` // Valid is true if CardapioWeekday is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardapioWeekday) Scan(value interface{}) error {
	if value == nil {
		ns.CardapioWeekday, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardapioWeekday.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardapioWeekday) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardapioWeekday), nil
}

type CardapioAddress struct {
	ID         int32              `db:"id" json:"id"`
	ProfileID  pgtype.Int4        `db:"profile_id" json:"profile_id"`
	Street     string             `db:"street" json:"street"`
	Number     string             `db:"number" json:"number"`
	Complement string             `db:"complement" json:"complement"`
	District   string             `db:"district" json:"district"`
	Cep        string             `db:"cep" json:"cep"`
	City       string             `db:"city" json:"city"`
	State      string             `db:"state" json:"state"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type CardapioBusinessHour struct {
	RestaurantID int32           `db:"restaurant_id" json:"restaurant_id"`
	Weekday      CardapioWeekday `db:"weekday" json:"weekday"`
	OpeningTime  pgtype.Time     `db:"opening_time" json:"opening_time"`
	ClosingTime  pgtype.Time     `db:"closing_time" json:"closing_time"`
}

type CardapioCousineType struct {
	ID   int32                `db:"id" json:"id"`
	Name CardapioCousineTypes `db:"name" json:"name"`
}

type CardapioEmployee struct {
	ID        int32              `db:"id" json:"id"`
	UsersID   pgtype.UUID        `db:"users_id" json:"users_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type CardapioEmployeeRestaurant struct {
	EmployeeID   pgtype.Int4 `db:"employee_id" json:"employee_id"`
	RestaurantID pgtype.Int4 `db:"restaurant_id" json:"restaurant_id"`
}

type CardapioItem struct {
	ID           int32              `db:"id" json:"id"`
	RestaurantID int32              `db:"restaurant_id" json:"restaurant_id"`
	Name         string             `db:"name" json:"name"`
	Description  string             `db:"description" json:"description"`
	Img          string             `db:"img" json:"img"`
	Value        pgtype.Numeric     `db:"value" json:"value"`
	Score        pgtype.Numeric     `db:"score" json:"score"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type CardapioOrder struct {
	ID            int32               `db:"id" json:"id"`
	ProfileID     int32               `db:"profile_id" json:"profile_id"`
	ShippingValue pgtype.Numeric      `db:"shipping_value" json:"shipping_value"`
	TotalValue    pgtype.Numeric      `db:"total_value" json:"total_value"`
	Status        CardapioOrderStatus `db:"status" json:"status"`
	CreatedAt     pgtype.Timestamptz  `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz  `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamptz  `db:"deleted_at" json:"deleted_at"`
}

type CardapioOrderItem struct {
	OrderID int32 `db:"order_id" json:"order_id"`
	ItemID  int32 `db:"item_id" json:"item_id"`
}

type CardapioOwner struct {
	ID           int32              `db:"id" json:"id"`
	UsersID      pgtype.UUID        `db:"users_id" json:"users_id"`
	RestaurantID pgtype.Int4        `db:"restaurant_id" json:"restaurant_id"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type CardapioPaymentMethod struct {
	ID          int32  `db:"id" json:"id"`
	Name        string `db:"name" json:"name"`
	Description string `db:"description" json:"description"`
	IsOnline    bool   `db:"isOnline" json:"is_online"`
}

type CardapioProfile struct {
	ID        int32              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	LastName  string             `db:"last_name" json:"last_name"`
	Cpf       string             `db:"cpf" json:"cpf"`
	Phone     string             `db:"phone" json:"phone"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type CardapioProfileRestaurant struct {
	ProfileID    int32 `db:"profile_id" json:"profile_id"`
	RestaurantID int32 `db:"restaurant_id" json:"restaurant_id"`
}

type CardapioRestaurant struct {
	ID        int32              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Cnpj      string             `db:"cnpj" json:"cnpj"`
	Phone     string             `db:"phone" json:"phone"`
	Score     pgtype.Numeric     `db:"score" json:"score"`
	AddressID int32              `db:"address_id" json:"address_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type CardapioRestaurantCousineType struct {
	RestaurantID  int32 `db:"restaurant_id" json:"restaurant_id"`
	CousineTypeID int32 `db:"cousine_type_id" json:"cousine_type_id"`
}

type CardapioRestaurantPaymentMethod struct {
	PaymentMethodID int32 `db:"payment_method_id" json:"payment_method_id"`
	RestaurantID    int32 `db:"restaurant_id" json:"restaurant_id"`
}

type CardapioUser struct {
	ID              pgtype.UUID             `db:"id" json:"id"`
	ProfileID       pgtype.Int4             `db:"profile_id" json:"profile_id"`
	Email           string                  `db:"email" json:"email"`
	Password        pgtype.Text             `db:"password" json:"password"`
	Role            NullCardapioUserRole    `db:"role" json:"role"`
	AccountProvider CardapioAccountProvider `db:"account_provider" json:"account_provider"`
	CreatedAt       pgtype.Timestamptz      `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz      `db:"updated_at" json:"updated_at"`
}
